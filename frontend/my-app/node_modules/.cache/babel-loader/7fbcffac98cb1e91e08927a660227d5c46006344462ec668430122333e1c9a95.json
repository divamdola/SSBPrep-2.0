{"ast":null,"code":"import axiosInstance from \"../utils/axiosInstance\";\nimport { persistor } from \"../store\";\nimport { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAIL, CLEAR_ERRORS, REGISTER_USER_REQUEST, REGISTER_USER_SUCCESS, REGISTER_USER_FAIL, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAIL, LOGOUT_SUCCESS, LOGOUT_FAIL } from \"../constants/userConstants\";\n\n// Register User\nexport const register = userData => async dispatch => {\n  try {\n    dispatch({\n      type: REGISTER_USER_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    };\n    const {\n      data\n    } = await axiosInstance.post(\"/register\", userData, config);\n    dispatch({\n      type: REGISTER_USER_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error(\"Registration error:\", error);\n    dispatch({\n      type: REGISTER_USER_FAIL,\n      payload: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || \"Registration failed. Please try again.\"\n    });\n  }\n};\n\n// Login\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axiosInstance.post(\"/login\", {\n      email,\n      password\n    }, config);\n    localStorage.setItem(\"token\", data.token); // Save token to localStorage\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || \"Invalid credentials\"\n    });\n  }\n};\n\n// Logout User\nexport const logout = () => async dispatch => {\n  try {\n    await axiosInstance.post(\"/logout\");\n    dispatch({\n      type: LOGOUT_SUCCESS\n    });\n    await persistor.flush(); // ✅ Ensures persisted state is cleared immediately\n    persistor.purge(); // ✅ Clears Redux persisted state\n\n    localStorage.removeItem(\"token\"); // ✅ Remove token\n    localStorage.removeItem(\"user\"); // ✅ Remove user data if stored\n\n    window.location.reload(); // ✅ Force UI update to reflect logout\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    dispatch({\n      type: LOGOUT_FAIL,\n      payload: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || \"Logout failed\"\n    });\n  }\n};\n\n// Load User\nexport const loadUser = () => async dispatch => {\n  try {\n    dispatch({\n      type: LOAD_USER_REQUEST\n    });\n    const token = localStorage.getItem(\"token\"); // Retrieve token from localStorage\n    if (!token) throw new Error(\"No token found\");\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    };\n    const {\n      data\n    } = await axiosInstance.get(\"/me\", config);\n    dispatch({\n      type: LOAD_USER_SUCCESS,\n      payload: data.user\n    });\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    dispatch({\n      type: LOAD_USER_FAIL,\n      payload: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || \"Failed to load user\"\n    });\n  }\n};\n\n// Clear Errors\nexport const clearError = () => async dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"names":["axiosInstance","persistor","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAIL","CLEAR_ERRORS","REGISTER_USER_REQUEST","REGISTER_USER_SUCCESS","REGISTER_USER_FAIL","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAIL","LOGOUT_SUCCESS","LOGOUT_FAIL","register","userData","dispatch","type","config","headers","data","post","payload","user","error","_error$response","_error$response$data","console","response","message","login","email","password","localStorage","setItem","token","_error$response2","_error$response2$data","logout","flush","purge","removeItem","window","location","reload","_error$response3","_error$response3$data","loadUser","getItem","Error","Authorization","get","_error$response4","_error$response4$data","clearError"],"sources":["C:/Users/divya/Desktop/Projects/SSBPrep/frontend/my-app/src/actions/userActions.js"],"sourcesContent":["import axiosInstance from \"../utils/axiosInstance\";\r\nimport { persistor } from \"../store\";\r\n\r\nimport {\r\n  LOGIN_REQUEST,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  CLEAR_ERRORS,\r\n  REGISTER_USER_REQUEST,\r\n  REGISTER_USER_SUCCESS,\r\n  REGISTER_USER_FAIL,\r\n  LOAD_USER_REQUEST,\r\n  LOAD_USER_SUCCESS,\r\n  LOAD_USER_FAIL,\r\n  LOGOUT_SUCCESS,\r\n  LOGOUT_FAIL,\r\n} from \"../constants/userConstants\";\r\n\r\n// Register User\r\nexport const register = (userData) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: REGISTER_USER_REQUEST });\r\n\r\n    const config = { headers: { \"Content-Type\": \"multipart/form-data\" } };\r\n\r\n    const { data } = await axiosInstance.post(\"/register\", userData, config);\r\n\r\n    dispatch({ type: REGISTER_USER_SUCCESS, payload: data.user });\r\n  } catch (error) {\r\n    console.error(\"Registration error:\", error);\r\n    dispatch({\r\n      type: REGISTER_USER_FAIL,\r\n      payload: error.response?.data?.message || \"Registration failed. Please try again.\",\r\n    });\r\n  }\r\n};\r\n\r\n// Login\r\nexport const login = (email, password) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: LOGIN_REQUEST });\r\n\r\n    const config = { headers: { \"Content-Type\": \"application/json\" } };\r\n\r\n    const { data } = await axiosInstance.post(\"/login\", { email, password }, config);\r\n\r\n    localStorage.setItem(\"token\", data.token); // Save token to localStorage\r\n\r\n    dispatch({ type: LOGIN_SUCCESS, payload: data.user });\r\n  } catch (error) {\r\n    dispatch({ type: LOGIN_FAIL, payload: error.response?.data?.message || \"Invalid credentials\" });\r\n  }\r\n};\r\n\r\n\r\n// Logout User\r\nexport const logout = () => async (dispatch) => {\r\n  try {\r\n    await axiosInstance.post(\"/logout\");\r\n\r\n    dispatch({ type: LOGOUT_SUCCESS });\r\n\r\n    await persistor.flush(); // ✅ Ensures persisted state is cleared immediately\r\n    persistor.purge(); // ✅ Clears Redux persisted state\r\n\r\n    localStorage.removeItem(\"token\"); // ✅ Remove token\r\n    localStorage.removeItem(\"user\"); // ✅ Remove user data if stored\r\n\r\n    window.location.reload(); // ✅ Force UI update to reflect logout\r\n  } catch (error) {\r\n    dispatch({\r\n      type: LOGOUT_FAIL,\r\n      payload: error.response?.data?.message || \"Logout failed\",\r\n    });\r\n  }\r\n};\r\n\r\n\r\n\r\n// Load User\r\nexport const loadUser = () => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: LOAD_USER_REQUEST });\r\n\r\n    const token = localStorage.getItem(\"token\"); // Retrieve token from localStorage\r\n    if (!token) throw new Error(\"No token found\");\r\n\r\n    const config = { headers: { Authorization: `Bearer ${token}` } };\r\n    const { data } = await axiosInstance.get(\"/me\", config);\r\n\r\n    dispatch({ type: LOAD_USER_SUCCESS, payload: data.user });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: LOAD_USER_FAIL,\r\n      payload: error.response?.data?.message || \"Failed to load user\",\r\n    });\r\n  }\r\n};\r\n\r\n// Clear Errors\r\nexport const clearError = () => async (dispatch) => {\r\n  dispatch({ type: CLEAR_ERRORS });\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}